#!/bin/bash
set -e
set -x
echo "Extracting marcvim into /tmp"
echo "Installing marcvim for $(whoami)"

# searches for the line number where finish the script and start the tar.gz
SKIP=`awk '/^__TARFILE_FOLLOWS__/ { print NR + 1; exit 0; }' $0`
#remember our file name
DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
SCRIPTNAME=$(basename $(readlink -nf $0))

# take the tarfile and pipe it into tar
rm -Rf /tmp/vimmy || true
mkdir /tmp/vimmy
tail -n +$SKIP $DIR/$SCRIPTNAME | tar -xz -C /tmp/vimmy
cd /tmp/vimmy

echo copying vim to local folder
rm -Rf ~/.vim &>/dev/null || true
mv /tmp/vimmy/.vim ~/.vim
rsync /tmp/vimmy/.vimupdate ~/ -aP && chmod a+x ~/.vimupdate
rsync /tmp/vimmy/gitwatch.sh ~/ -aP && chmod a+x ~/gitwatch.sh

rm -Rf ~/.vimrc &>/dev/null || true
ln -s .vim/bundle/vim-my-settings/.vimrc ~/.vimrc

# install vim executable and vim.share
cp /tmp/vimmy/vim /usr/local/bin/vim
mkdir /tmp/vim.share
cd /tmp/vim.share
tar xfz /tmp/vimmy/vim.share

#TODO caution: if vim version changes
rsync /tmp/vim.share/runtime/ /usr/share/vim/vim80/ -ar

rm -Rf /tmp/vimmy
cd ~ # hint nodejs requires cwd

echo "Adding cronjob to update vim packages"
grep -q vimupdate ~/.bashrc || {
	echo 'pkill -9 -f vimupdate ; ~/.vimupdate &' >> ~/.bashrc
    echo 'alias gs="git status"' >> ~/.bashrc
    echo 'alias gac="git add . && git status -s > /tmp/state && git commit -a -F /tmp/state && rm /tmp/state"' >> ~/.bashrc
}


# install dependencies
if ping -c 1 8.8.8.8; then

    dpkg --get-selections|grep -v deinstall |grep ctags || {
        apt-get install -y ctags
    }
    dpkg --get-selections|grep -v deinstall |grep nodejs || {
        apt-get install -y nodejs
    }
    dpkg --get-selections|grep -v deinstall |grep npm || {
        apt-get install -y npm
    }
    dpkg --get-selections|grep -v deinstall |grep inotify-tools || {
        apt-get install -y inotify-tools
    }
fi

if ping -c 1 8.8.8.8; then
    if which jshint &>/dev/null; then
        echo 'jshint already installed'
    else
        npm install -g jshint
    fi
fi

update-alternatives --display node |grep Current.*best.*version.*usr.bin.nodejs &>/dev/null || {
    echo /usr/bin/nodejs must be set as node for tern-compile YCM
    update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10
}

# netrc for ultisnips
NETRC="$HOME/.netrc"
if [[ ! -f "$NETRC" ]]; then
    touch $NETRC
fi

if [[ -z "$GITHUB_USER" ]]; then 
    echo "Please provide GITHUB_USER and GITHUB_PWD!"
    exit -1
fi
grep -q github.com $NETRC || {
    echo "machine github.com login $GITHUB_USER password $GITHUB_PWD" >> $NETRC
    chmod 600 $NETRC
}

# flake 8
echo "trying to install flake8"
pip install flake8 --upgrade || echo "Unable to execute pip"


echo run vimupdater, which is nexttime started at bashrc
pkill -9 -f vimupdate || true
~/.vimupdate &

chown $(whoami) ~/.vim -R

echo "Finished"
exit 0
# NOTE: Don't place any newline characters after the last line below.
__TARFILE_FOLLOWS__
