#!/bin/bash
set -e
set -x

if [ "$EUID" -ne 0 ]; then
	echo "Please run as root like:"
	echo "sudo $0"
	exit
fi

echo "Extracting marcvim into /tmp"
echo "Installing marcvim for $(whoami)"



# searches for the line number where finish the script and start the tar.gz
SKIP=`awk '/^__TARFILE_FOLLOWS__/ { print NR + 1; exit 0; }' $0`
#remember our file name
DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
SCRIPTNAME=$(basename $(readlink -nf $0))

# take the tarfile and pipe it into tar
rm -Rf /tmp/vimmy || true
mkdir /tmp/vimmy
tail -n +$SKIP $DIR/$SCRIPTNAME | tar -xz -C /tmp/vimmy
cd /tmp/vimmy

echo copying vim to local folder
rm -Rf ~/.vim &>/dev/null || true
mv /tmp/vimmy/.vim ~/.vim
rsync /tmp/vimmy/.vimupdate ~/ -aP && chmod a+x ~/.vimupdate

rm -Rf ~/.vimrc &>/dev/null || true
ln -s .vim/bundle/vim-my-settings/.vimrc ~/.vimrc

# install vim executable and vim.share
ls -lha /tmp/vimmy
cp /tmp/vimmy/vim /usr/local/bin/vim
rm /tmp/vim.share -R || true
mkdir /tmp/vim.share
cd /tmp/vim.share
tar xfz /tmp/vimmy/vim.share

#TODO caution: if vim version changes
mkdir -p /usr/local/share/nvim/runtime/
rsync /tmp/vim.share/runtime/ /usr/local/share/nvim/runtime/ -ar

rm -Rf /tmp/vimmy
cd ~ # hint nodejs requires cwd

#echo "Adding cronjob to update vim packages"
#grep -q vimupdate ~/.bashrc || {
#	echo 'pkill -9 -f vimupdate ; ~/.vimupdate &' >> ~/.bashrc
#    echo 'alias gs="git status"' >> ~/.bashrc
#    echo 'alias gac="git add . && git status -s > /tmp/state && git commit -a -F /tmp/state && rm /tmp/state"' >> ~/.bashrc
#}
echo "Suggestion: to automatically update vim snippets add this to your .bashrc"
echo ''
echo 'pkill -9 -f vimupdate ; ~/.vimupdate &'
echo 'alias gs="git status"' 
echo 'alias gac="git add . && git status -s > /tmp/state && git commit -a -F /tmp/state && rm /tmp/state"' 
echo ''
echo ''


# install dependencies
read -p "Shall i install dependencies: ctags, nodejs, npm, pip, pip neovim, pip flake8? [Y/n]" install
if [[ -z "$install" || "$install" == "y" || "$install" == "Y" ]]; then

    dpkg --get-selections|grep -v deinstall |grep python-pip || {
        apt-get install -y python-pip
    }
    dpkg --get-selections|grep -v deinstall |grep ctags || {
        apt-get install -y ctags
    }
    dpkg --get-selections|grep -v deinstall |grep nodejs || {
        apt-get install -y nodejs
    }
    dpkg --get-selections|grep -v deinstall |grep npm || {
        apt-get install -y npm
    }
    {
        pip install neovim || echo "Unable to pip install neovim"
    }

    {
        echo "trying to install flake8"
        pip install flake8 || echo "Unable to pip install flake8"
    }

    {
        if which jshint &>/dev/null; then
            echo 'jshint already installed'
        else
            npm install -g jshint
        fi
    }
fi

read -p "Shall i set node to /usr/bin/node ? [Y/n]" install
if [[ -z "$install" || "$install" == "y" || "$install" == "Y" ]]; then
	update-alternatives --display node |grep Current.*best.*version.*usr.bin.nodejs &>/dev/null || {
		echo /usr/bin/nodejs must be set as node for tern-compile YCM
		update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10
	}
fi


# link neovim to old vim
if [[ -d ~/.config/nvim ]]; then
    cd ~/.config
    rm nvim.bak -Rf || true
    mv nvim nvim.bak
fi
mkdir -p ~/.config
rm -Rf ~/.config/nvim || true
ln -s ~/.vim ~/.config/nvim || echo 'Error linking ~/.vim to ~/.config/nvim'
ln -s ~/.vimrc ~/.config/nvim/init.vim || echo 'Error linking ~/.vimrc to ~/.config/nvim/init.vim'

cp ~/.vim/ag /usr/local/bin

chown $(whoami) ~/.vim -R

echo "Finished"
exit 0
# NOTE: Don't place any newline characters after the last line below.
__TARFILE_FOLLOWS__
