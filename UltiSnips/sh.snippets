
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
#!/bin/sh

endsnippet

snippet !env "#!/usr/bin/env (!env)"
#!/usr/bin/env bash 

endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet dir "Directory of current bashfile"
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
endsnippet

snippet target
CONFIG_FILE=/etc/default/grub
TARGET_KEY=GRUB_CMDLINE_LINUX_DEFAULT
REPLACEMENT_VALUE='"splash"'
echo setting splash option $TARGET_KEY to $REPLACEMENT_VALUE in $CONFIG_FILE
sed -i "s/\($TARGET_KEY *= *\).*/\1$REPLACEMENT_VALUE/" $CONFIG_FILE
endsnippet

snippet multiline_var
SQL=$(cat <<-EOF
	   SELECT pg_terminate_backend(pg_stat_activity.pid)
	   FROM pg_stat_activity 
	   WHERE pg_stat_activity.datname = '$DBNAME' 
	   AND pid <> pg_backend_pid(); 
	EOF)
endsnippet

snippet cut_var_til_delimiter
$1=${var%.*}  # ho.gz --> ho
endsnippet

snippet read_from_stdin
while read line
do
	echo "$line"
done < "${1:-/dev/stdin}"
endsnippet

snippet check_for_any_parameter_value
ARGS=( "$@" )
# asterisk as one word, @ as separate words
echo "${ARGS[*]}" |grep -P -q '[-]force' && {
}
endsnippet

snippet leave_params
ALL_PARAMS=${@:2} # leaves out $1
endsnippet

snippet exec
exec gosu --> merke: aktueller thread wird ersetzt
endsnippet

snippet replace
a=mama
b=${a//a/i} # replaces all occurrences of a through i
b=${a/a/i} # replaces FIRST occurrence of a through i
endsnippet

snippet iterate_find
find $CUSTOMS_DIR -name '*.patch' |grep "\/$ODOO_VERSION\/" | while read f
do
done
endsnippet

snippet bash "parameter from pipe and parameters"
[[ ! -t 0 ]] && {  # checks if there is pipe data https://unix.stackexchange.com/questions/33049/check-if-pipe-is-empty-and-run-a-command-on-the-data-if-it-isnt
	sql=$(cat /dev/stdin)
} || {
	sql=""
}
endsnippet

snippet flock
LOCKFILE=$(mktemp -u)
(
  flock -x 200

  # do

) 200>$LOCKFILE
endsnippet

snippet wait_for_port
while ! nc -q 1 ${1:ip} ${2:port} </dev/null; do sleep 10; done
endsnippet

snippet elapsed_time
now=$(date +"%s")
(( elapsed = ("$now" - "$started") % 5))
if [[ "$elapsed" == "0" ]]; then
	echo "Waiting for $2 on port $3..."
fi
endsnippet

snippet trap
trap "kill -9 $proc_id_watcher; kill -9 $self" SIGINT
endsnippet

snippet text_split_by_linebreak_to_array
turns:
hallo
zwei

into 
( hallo zwei )
readarray -t myarray <<<"$my_text"
endsnippet

snippet countdown
secs=$((5 * 60))
while [ $secs -gt 0 ]; do
   echo -ne "$secs\033[0K\r"
   sleep 1
   : $((secs--))
done
endsnippet
