snippet apt
- name: install pip
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  loop:
    - python3-pi
endsnippet

snippet pip
- name: install pip packages
  pip:
    name: "{{ item }}"
  loop:
    - pathlib
    - docker-compose
endsnippet

snippet file_exists
- name: Check if $1 exists
  stat:
    path: $1
  register: stat_result

- name: Create $1, if it doesnt exist already
  file:
    path: $1
    state: touch
  when: not stat_result.stat.exists
endsnippet

snippet file_differs
- name: first file check in inventory
  stat:
    path: $1
    get_checksum: yes
  delegate_to: localhost
  register: $2

- name: next check
  stat:
    path: $3
    get_checksum: yes
  register: $4

- name: Block run only if file has no changes
  $0
  when: $2.stat.checksum == $4.stat.checksum

endsnippet

snippet synchronize_from_server
- name: Fetch stuff from the remote and save to local
  synchronize:
    src: "{{ item }}"
    dest=/tmp/
    mode=pull
  with_items:
    - "folder/one"
    - "folder/two"
endsnippet

snippet task_run_locally
- name: ...
  connection: local

# tested 02.05.2022 works
- name: clone locally and transfer
  local_action:
    module: ansible.builtin.shell
    cmd: ...
endsnippet

snippet proxy_jump
hy-ite:
  client: ite.conf
  ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q hy-router"'
  ansible_host: 192.168.77.4
endsnippet

snippet inline_python
- name: register change flag
  register: openvpn_changed_config
  command: /usr/bin/python3
  args:
    stdin: |
      from pathlib import Path
      old = Path("{{ dest_settings_file }}")
      new = Path("{{ dest_settings_file }}.new")
      if old.exists() and old.read_text() != new.read_text():
        print('changed')
        old.write_text(new.read_text())
        new.unlink()
      else:
        print('same')
  changed_when: openvpn_changed_config.stdout_lines[0] == 'changed
- debug:
  var: results
endsnippet


snippet if_user_exists
- getent:
    database: passwd
    key: "{{ username }}"
    fail_key: False
- block:
  $0
  when: getent_passwd.get(usernamme)  # autogenerated var
endsnippet

snippet prompt
- name: Continue delete
  pause:
    prompt: Please confirm to delete /var/lib/docker on {{ ansible_host }}
  when: remove_var_lib_docker is defined and remove_var_lib_docker
endsnippet

snippet pause
- name: A helpful reminder of what to look out for post-update
  pause:
    prompt: "pause check it"
endsnippet

snippet home-directory

- name: get user home directory of {{ username}}
  shell: >
          getent passwd {{ username }}  | awk -F: '{ print $6 }'
  changed_when: false
  register: user_home
- name: debug output
  debug:
    var: user_home.stdout

endsnippet

snippet shell
- name: $1
  shell:
    cmd: |
      ............
      # careful with return codes; had strange case with syntaxed error
      # if clause; set -e did not help
  args:
    executable: /bin/bash
endsnippet

snippet pause_ask_continue
- name: Continue ......
  pause:
    prompt: Please confirm .........
  when: ...........

endsnippet

snippet if group exists
- getent:
    database: group
    split: ':'
- debug:
    var: ansible_facts.getent_group

- user:
    name: "{{ username }}"
    group: $1
  when: "'$1' in getent_group"

endsnippet

snippet local_username
- name: get the username running the deploy
  become: false
  local_action: command whoami
  register: username_on_the_host

- debug: var=username_on_the_host

endsnippet